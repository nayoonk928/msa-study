version: '3.8'

services:
  postgres:
    image: postgres
    container_name: postgres
    env_file:
      - .env
    volumes:
      - ./db/postgres/data:/var/lib/postgres
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB}
    networks:
      - preorder

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - preorder

  user-service:
    image: user-service:1.0
    container_name: user-service
    restart: always
    build:
      context: module_user_service/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - ${EUREKA_YML}=${EUREKA_URL}
      - ${REDIS_YML}=${REDIS_HOST}
      - ${POSTGRES_YML}=${POSTGRES_URL}
    depends_on:
      - eureka
      - postgres
      - redis
    networks:
      - preorder

  activity-service:
    image: activity-service:1.0
    container_name: activity-service
    restart: always
    build:
      context: module_activity_service/
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - .env
    environment:
      - ${EUREKA_YML}=${EUREKA_URL}
      - ${REDIS_YML}=${REDIS_HOST}
      - ${POSTGRES_YML}=${POSTGRES_URL}
      - ${FEIGN_NEWSFEED_CLIENT_YML}=${FEIGN_NEWSFEED_CLIENT}
      - ${FEIGN_USER_CLIENT_YML}=${FEIGN_USER_CLIENT}
    depends_on:
      - eureka
      - postgres
      - redis
    networks:
      - preorder

  newsfeed-service:
    image: newsfeed-service:1.0
    container_name: newsfeed-service
    restart: always
    build:
      context: module_newsfeed_service/
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      - ${EUREKA_YML}=${EUREKA_URL}
      - ${REDIS_YML}=${REDIS_HOST}
      - ${POSTGRES_YML}=${POSTGRES_URL}
      - ${FEIGN_ACTIVITY_CLIENT_YML}=${FEIGN_ACTIVITY_CLIENT}
    depends_on:
      - eureka
      - postgres
      - redis
    networks:
      - preorder

  eureka:
    image: eureka:1.0
    container_name: eureka
    restart: always
    build:
      context: module_eureka/
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - preorder

  api-gateway:
    image: api-gateway:1.0
    container_name: api-gateway
    build:
      context: module_api_gateway/
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8083:8083"
    env_file:
      - .env
    environment:
      - ${EUREKA_YML}=${EUREKA_URL}
      - ${REDIS_YML}=${REDIS_HOST}
    networks:
      - preorder

networks:
  preorder: